#Hämta länken för UNICEF-data med API-nyckel sdmx(RAW DATA): 
url_lung = "https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/data/UNICEF,MNCH,1.0/.MNCH_PNEUCARE._T......?startPeriod=2014&endPeriod=2024&format=csv&labels=name"
url_amning = "https://sdmx.data.unicef.org/ws/public/sdmxapi/rest/data/UNICEF,NUTRITION,1.0/.NT_BF_EIBF+NT_BF_EXBF+NT_BF_CBF_12_23._T.....?startPeriod=2014&endPeriod=2024&format=csv&labels=name"


#Utnyttja funktionen requests.get från paketet requests för att hämta datan: 
response_lung = requests.get(url_lung)
response_amning = requests.get(url_amning)


#Kolla om requesten gick igenom och spara csv-filen, först lunginflammation: 
if response_lung.status_code == 200:
   
    with open("unicef_pneumonia_data.csv", "wb") as file:
        file.write(response_lung.content)
    print("CSV-filen för pneumonia raw data har laddats ned!")
    
else:
    print(f"Error: {response_lung.status_code} - {response_lung.text}")


#Kollar om requesten gick igenom och sparar csv-filen, nu för amning: 
if response_amning.status_code == 200:
   
    with open("unicef_amning_data.csv", "wb") as file:
        file.write(response_amning.content)
    print("CSV-filen för breastfeeding raw data har laddats ned!")
    
else:
    print(f"Error: {response_amning.status_code} - {response_amning.text}")

---------------------------------------------------------------------------

#Funktion FÖR ATT LÄGGA IN SYDOSTASIATISKA OCH AFRIKANSKA LÄNDERS AMNING OCH LUNGINFLAMMATION I SAMMA FIL (MEN SERPARAT FÖR REGION): 

import pandas as pd

def merge_data_for_countries(countries, output_file):

    # Läs in data från fasta filvägar
    df_amning = pd.read_csv("unicef_amning_data.csv")
    df_pneumonia = pd.read_csv("unicef_pneumonia_data.csv")

    
    # Filtrera amningsdata för de valda länderna
    filtered_amning = df_amning[df_amning['Geographic area'].isin(countries)]
    filtered_amning = filtered_amning[['Geographic area', 'Indicator', 'OBS_VALUE']]

    
    # Gruppera och beräkna medelvärdet för amningsdata
    aggregated_amning = filtered_amning.groupby(['Geographic area', 'Indicator'], as_index=False)['OBS_VALUE'].mean()

    
    # Filtrera pneumonidata för de valda länderna och Total-värden
    filtered_pneumonia = df_pneumonia[
        (df_pneumonia['Geographic area'].isin(countries)) &
        (df_pneumonia['Wealth Quintile'] == 'Total') &
        (df_pneumonia['Residence'] == 'Total') &
        (df_pneumonia["Mother's Education Level"] == 'Total')
    ]
    
    # Välj relevanta kolumner och byt namn på 'OBS_VALUE' i pneumoniadata
    filtered_pneumonia = filtered_pneumonia[['Geographic area', 'OBS_VALUE']]
    filtered_pneumonia = filtered_pneumonia.rename(columns={'OBS_VALUE': 'Pneumonia_Value'})
    aggregated_pneumonia = filtered_pneumonia.groupby('Geographic area')['Pneumonia_Value'].mean().reset_index()

    
    # Slå ihop amnings- och pneumoniadata
    merged_data = pd.merge(aggregated_amning, aggregated_pneumonia, on='Geographic area', how='left')
    
    # Spara den sammanslagna datan till en ny CSV-fil
    
    merged_data.to_csv(output_file, index=False)
    print("Ny CSV-fil med amningsdata och pneumonidata för valda länder har skapats:", output_file)


#Kalla på funktionen, för respektive region: 

countries_southeastasia = [
    'Thailand', 'Indonesia', 'Viet Nam', 'Philippines', 'Myanmar', 
    'Cambodia', 'Timor-Leste', "Lao People's Democratic Republic"]
merge_data_for_countries(countries_southeastasia, "asia_merged_amning_and_pneumonia_data.csv")


countries_centralafrica = [
    'Angola', 'Cameroon', 'Central African Republic', 'Chad', 'Congo',
    'Democratic Republic of the Congo','Equatorial Guinea','Gabon',
    'Sao Tome and Principe']
merge_data_for_countries(countries_centralafrica, "africa_merged_amning_and_pneumonia_data.csv")


__________________________________________________________________________________

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

# Ladda datasets
asia_data = pd.read_csv('asia_merged_amning_and_pneumonia_data.csv')  
africa_data = pd.read_csv('africa_merged_amning_and_pneumonia_data.csv')  

# Hämta data för respektive region
asia_data['Region'] = 'Asia'
africa_data['Region'] = 'Africa'

# Kombinera datasets för att göra själva plotten lättare: 
data = pd.concat([asia_data, africa_data])

# Hämta indikatorer, dvs för respektive amningspraktik
indicators = data['Indicator'].unique()

# Skapa subplot-layout
n_indicators = len(indicators) #Vi har endast 3 indikators, dvs antal typer av amningspraktiker
ncols = 3  # Antal grafer per rad (vi har endast en rad)
nrows = (n_indicators // ncols)  #Funktion för att få rätt antal rader. 
fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(18, 6 * nrows))  # Anpassa subplot-storlek
axes = axes.flatten()  # Platta ut för att enkelt iterera

# Loopa igenom respektive indikator och skapa grafer
for i, indicator in enumerate(indicators):
    ax = axes[i]  # Välj subplot
    subset = data[data['Indicator'] == indicator]
    
    # Separera data baserat på region: 
    asia = subset[subset['Region'] == 'Asia']
    africa = subset[subset['Region'] == 'Africa']
    
   # Beräkna R²-värden med Pearsonr
    r2_asia = pearsonr(asia['OBS_VALUE'], asia['Pneumonia_Value'])[0]**2
    r2_africa = pearsonr(africa['OBS_VALUE'], africa['Pneumonia_Value'])[0]**2
    
    # Skapa scatter plot med regression lines
    sns.regplot(data=asia, x='OBS_VALUE', y='Pneumonia_Value', ax=ax, label=f"Southeast Asia (R²={r2_asia:.2f})", scatter_kws={'alpha': 0.6}, ci=95)
    sns.regplot(data=africa, x='OBS_VALUE', y='Pneumonia_Value', ax=ax, label=f"Central Africa (R²={r2_africa:.2f})", scatter_kws={'alpha': 0.6}, ci=95)

    # Lägg till etiketter och titel
    ax.set_xlabel(f"{indicator} (%)")
    ax.set_ylabel("Pneumonia incidence (%)")
    ax.set_title(f"{indicator} vs Pneumonia incidence")
    ax.legend()

plt.tight_layout()
plt.show()
